// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ERPIntegration {
    address public erpSystem; // Address of the ERP system
    address public admin; // Address of the contract administrator

    // Events for tracking important activities
    event ERPConnected(address indexed erpSystem);
    event DataSent(address indexed sender, string data);

    // Modifier to restrict certain functions to the contract administrator
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only the administrator can call this function");
        _;
    }

    // Modifier to ensure that the ERP system is connected before certain operations
    modifier onlyERPConnected() {
        require(erpSystem != address(0), "ERP system is not connected");
        _;
    }

    // Constructor to set the administrator's address
    constructor() {
        admin = msg.sender;
    }

    // Function to connect the ERP system to the smart contract
    function connectERP(address _erpSystem) external onlyAdmin {
        require(_erpSystem != address(0), "Invalid ERP system address");
        erpSystem = _erpSystem;
        emit ERPConnected(_erpSystem);
    }

    // Function to send data from the ERP system to the smart contract
    function sendData(string memory data) external onlyERPConnected {
        // Implement the necessary logic to handle the received data
        // For simplicity, we'll just emit an event here
        emit DataSent(msg.sender, data);
    }

    // Function to retrieve information from the smart contract (example only)
    function getERPSystem() external view returns (address) {
        return erpSystem;
    }

    // Function to perform any cleanup or additional actions when needed (example only)
    function disconnectERP() external onlyAdmin {
        erpSystem = address(0);
        
    }
}
